%% Const vars
% speed
a = 0.2;

% dist between wheels
d = 0.254; % meters

% pause time
pause_time = 0.1; % seconds


%% generalized vector equations in terms of a,d, and t

% parametric squiggle
r = [0.3960*cos(2.65*((a*t)+1.4));-0.99*sin((a*t) + 1.4);0*t];

% v full
vfull = [(-0.10494E1).*a.*sin(0.371E1+0.265E1.*a.*t);(-0.99E0).*a.*cos( ...
  0.14E1+a.*t);0*t];

% velocity magnitude
v = abs(a).^(-2).*(a.^6.*(0.1E1.*cos(0.14E1+a.*t).^2+0.11236E1.*sin( ...
  0.371E1+0.265E1.*a.*t).^2).^(-6).*(0.2809E1.*cos(0.14E1+a.*t).^5.* ...
  cos(0.371E1+0.265E1.*a.*t)+0.106E1.*cos(0.14E1+a.*t).^4.*sin( ...
  0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t)+0.631238E1.*cos(0.14E1+ ...
  a.*t).^3.*cos(0.371E1+0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.*t) ...
  .^2+0.238203E1.*cos(0.14E1+a.*t).^2.*sin(0.14E1+a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^3+0.35463E1.*cos(0.14E1+a.*t).*cos( ...
  0.371E1+0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.*t).^4+0.133823E1.* ...
  sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t).^5).^2).^(1/2);

% angular vel magnitude
w = a.^3.*abs(a).^(-2).*(0.1E1.*cos(0.14E1+a.*t).^2+ ...
  0.11236E1.*sin(0.371E1+0.265E1.*a.*t).^2).^(-3).*((-0.2809E1).* ...
  cos(0.14E1+a.*t).^5.*cos(0.371E1+0.265E1.*a.*t)+(-0.106E1).*cos( ...
  0.14E1+a.*t).^4.*sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t)+( ...
  -0.631238E1).*cos(0.14E1+a.*t).^3.*cos(0.371E1+0.265E1.*a.*t).* ...
  sin(0.371E1+0.265E1.*a.*t).^2+(-0.238203E1).*cos(0.14E1+a.*t).^2.* ...
  sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t).^3+(-0.35463E1).*cos( ...
  0.14E1+a.*t).*cos(0.371E1+0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.* ...
  t).^4+(-0.133823E1).*sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t) ...
  .^5);

% That vector in room coordinate system
That = [(-0.10494E1).*a.*abs(a).^(-1).*sin(0.371E1+0.265E1.*a.*t).*( ...
  0.9801E0.*cos(0.14E1+a.*t).^2+0.110124E1.*sin(0.371E1+0.265E1.*a.* ...
  t).^2).^(-1/2);(-0.99E0).*a.*abs(a).^(-1).*cos(0.14E1+a.*t).*( ...
  0.9801E0.*cos(0.14E1+a.*t).^2+0.110124E1.*sin(0.371E1+0.265E1.*a.* ...
  t).^2).^(-1/2);0*t];

% Nhat vector in room coordinate system
Nhat = [cos(0.14E1+a.*t).*((-0.278091E1).*cos(0.14E1+a.*t).*cos(0.371E1+ ...
  0.265E1.*a.*t)+(-0.10494E1).*sin(0.14E1+a.*t).*sin(0.371E1+ ...
  0.265E1.*a.*t)).*(cos(0.14E1+a.*t).^4.*(0.773346E1.*cos(0.371E1+ ...
  0.265E1.*a.*t).^2+(-0.217626E-15).*sin(0.14E1+a.*t).^2)+ ...
  0.868932E1.*cos(0.14E1+a.*t).^2.*cos(0.371E1+0.265E1.*a.*t).^2.* ...
  sin(0.371E1+0.265E1.*a.*t).^2+0.27531E0.*sin(0.28E1+2.*a.*t).^2.* ...
  sin(0.371E1+0.265E1.*a.*t).^2+(0.174101E-14.*cos(0.371E1+0.265E1.* ...
  a.*t).^2+0.123735E1.*sin(0.14E1+a.*t).^2).*sin(0.371E1+0.265E1.* ...
  a.*t).^4+0.364786E0.*csc(0.14E1+a.*t).^2.*sin(0.28E1+2.*a.*t).^3.* ...
  sin(0.742E1+0.53E1.*a.*t)+0.163949E1.*sin(0.28E1+2.*a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^2.*sin(0.742E1+0.53E1.*a.*t)).^(-1/2);sin( ...
  0.371E1+0.265E1.*a.*t).*(0.294776E1.*cos(0.14E1+a.*t).*cos( ...
  0.371E1+0.265E1.*a.*t)+0.111236E1.*sin(0.14E1+a.*t).*sin(0.371E1+ ...
  0.265E1.*a.*t)).*(cos(0.14E1+a.*t).^4.*(0.773346E1.*cos(0.371E1+ ...
  0.265E1.*a.*t).^2+(-0.217626E-15).*sin(0.14E1+a.*t).^2)+ ...
  0.868932E1.*cos(0.14E1+a.*t).^2.*cos(0.371E1+0.265E1.*a.*t).^2.* ...
  sin(0.371E1+0.265E1.*a.*t).^2+0.27531E0.*sin(0.28E1+2.*a.*t).^2.* ...
  sin(0.371E1+0.265E1.*a.*t).^2+(0.174101E-14.*cos(0.371E1+0.265E1.* ...
  a.*t).^2+0.123735E1.*sin(0.14E1+a.*t).^2).*sin(0.371E1+0.265E1.* ...
  a.*t).^4+0.364786E0.*csc(0.14E1+a.*t).^2.*sin(0.28E1+2.*a.*t).^3.* ...
  sin(0.742E1+0.53E1.*a.*t)+0.163949E1.*sin(0.28E1+2.*a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^2.*sin(0.742E1+0.53E1.*a.*t)).^(-1/2);0*t]; ...
  
% left wheel velocities
vl = (a.^2.*(0.9801E0.*cos(0.14E1+a.*t).^2+0.110124E1.*sin(0.371E1+ ...
  0.265E1.*a.*t).^2)).^(1/2)+(-1/2).*a.^3.*d.*abs(a).^(-2).*(0.1E1.* ...
  cos(0.14E1+a.*t).^2+0.11236E1.*sin(0.371E1+0.265E1.*a.*t).^2).^( ...
  -3).*((-0.2809E1).*cos(0.14E1+a.*t).^5.*cos(0.371E1+0.265E1.*a.*t) ...
  +(-0.106E1).*cos(0.14E1+a.*t).^4.*sin(0.14E1+a.*t).*sin(0.371E1+ ...
  0.265E1.*a.*t)+(-0.631238E1).*cos(0.14E1+a.*t).^3.*cos(0.371E1+ ...
  0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.*t).^2+(-0.238203E1).*cos( ...
  0.14E1+a.*t).^2.*sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t).^3+( ...
  -0.35463E1).*cos(0.14E1+a.*t).*cos(0.371E1+0.265E1.*a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^4+(-0.133823E1).*sin(0.14E1+a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^5);

% right wheel velocities
vr = (a.^2.*(0.9801E0.*cos(0.14E1+a.*t).^2+0.110124E1.*sin(0.371E1+ ...
  0.265E1.*a.*t).^2)).^(1/2)+(1/2).*a.^3.*d.*abs(a).^(-2).*(0.1E1.* ...
  cos(0.14E1+a.*t).^2+0.11236E1.*sin(0.371E1+0.265E1.*a.*t).^2).^( ...
  -3).*((-0.2809E1).*cos(0.14E1+a.*t).^5.*cos(0.371E1+0.265E1.*a.*t) ...
  +(-0.106E1).*cos(0.14E1+a.*t).^4.*sin(0.14E1+a.*t).*sin(0.371E1+ ...
  0.265E1.*a.*t)+(-0.631238E1).*cos(0.14E1+a.*t).^3.*cos(0.371E1+ ...
  0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.*t).^2+(-0.238203E1).*cos( ...
  0.14E1+a.*t).^2.*sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t).^3+( ...
  -0.35463E1).*cos(0.14E1+a.*t).*cos(0.371E1+0.265E1.*a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^4+(-0.133823E1).*sin(0.14E1+a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^5);

%% Run it on the robot!

% initialize the robot
pub = rospublisher('/raw_vel');
msg = rosmessage(pub);

% pause until a key is pressed
pause();

% start a timer
tic

% stop the timer when we reach all the desired steps.
while toc <= 3.2 / a
    % send velocities by evaluating left and right velocities at the
    % current time.
    msg.Data = [left_velocity(a,toc,d) right_velocity(a,toc,d)];
    
    % debug message
    fprintf('going at %4.2f left and %4.2f right at %4.2f \n',left_velocity(a,toc,d), right_velocity(a,toc,d), toc);
    send(pub, msg);
    
    % take a pause to go this speed for a small amount of time
    pause(0.09)
end

% send a stop signal
msg.Data = [0 0];
send(pub, msg);

% the position function turned into a matlab function
function f = pos(a,t)
    f =[0.3960*cos(2.65*((a*t)+1.4));-0.99*sin((a*t) + 1.4);0*t];
end

% the velocity function turned into a matlab function
function f = vel(a,t)
    f = abs(a).^(-2).*(a.^6.*(0.1E1.*cos(0.14E1+a.*t).^2+0.11236E1.*sin( ...
    0.371E1+0.265E1.*a.*t).^2).^(-6).*(0.2809E1.*cos(0.14E1+a.*t).^5.* ...
    cos(0.371E1+0.265E1.*a.*t)+0.106E1.*cos(0.14E1+a.*t).^4.*sin( ...
    0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t)+0.631238E1.*cos(0.14E1+ ...
    a.*t).^3.*cos(0.371E1+0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.*t) ...
    .^2+0.238203E1.*cos(0.14E1+a.*t).^2.*sin(0.14E1+a.*t).*sin( ...
    0.371E1+0.265E1.*a.*t).^3+0.35463E1.*cos(0.14E1+a.*t).*cos( ...
    0.371E1+0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.*t).^4+0.133823E1.* ...
    sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t).^5).^2).^(1/2);
end

% angular velocity function turned into a matlab function
function f = angular_vel(a,t)
    f = a.^3.*abs(a).^(-2).*(0.1E1.*cos(0.14E1+a.*t).^2+ ...
    0.11236E1.*sin(0.371E1+0.265E1.*a.*t).^2).^(-3).*((-0.2809E1).* ...
    cos(0.14E1+a.*t).^5.*cos(0.371E1+0.265E1.*a.*t)+(-0.106E1).*cos( ...
    0.14E1+a.*t).^4.*sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t)+( ...
    -0.631238E1).*cos(0.14E1+a.*t).^3.*cos(0.371E1+0.265E1.*a.*t).* ...
    sin(0.371E1+0.265E1.*a.*t).^2+(-0.238203E1).*cos(0.14E1+a.*t).^2.* ...
    sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t).^3+(-0.35463E1).*cos( ...
    0.14E1+a.*t).*cos(0.371E1+0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.* ...
    t).^4+(-0.133823E1).*sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t) ...
    .^5);
end

% right wheel velocity function turned into a matlab function
function f = right_velocity(a,t,d)
  f = (a.^2.*(0.9801E0.*cos(0.14E1+a.*t).^2+0.110124E1.*sin(0.371E1+ ...
  0.265E1.*a.*t).^2)).^(1/2)+(1/2).*a.^3.*d.*abs(a).^(-2).*(0.1E1.* ...
  cos(0.14E1+a.*t).^2+0.11236E1.*sin(0.371E1+0.265E1.*a.*t).^2).^( ...
  -3).*((-0.2809E1).*cos(0.14E1+a.*t).^5.*cos(0.371E1+0.265E1.*a.*t) ...
  +(-0.106E1).*cos(0.14E1+a.*t).^4.*sin(0.14E1+a.*t).*sin(0.371E1+ ...
  0.265E1.*a.*t)+(-0.631238E1).*cos(0.14E1+a.*t).^3.*cos(0.371E1+ ...
  0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.*t).^2+(-0.238203E1).*cos( ...
  0.14E1+a.*t).^2.*sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t).^3+( ...
  -0.35463E1).*cos(0.14E1+a.*t).*cos(0.371E1+0.265E1.*a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^4+(-0.133823E1).*sin(0.14E1+a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^5);
end

% left wheel velocity velocity function turned into a matlab function
function f = left_velocity(a,t,d)
   f = (a.^2.*(0.9801E0.*cos(0.14E1+a.*t).^2+0.110124E1.*sin(0.371E1+ ...
  0.265E1.*a.*t).^2)).^(1/2)+(-1/2).*a.^3.*d.*abs(a).^(-2).*(0.1E1.* ...
  cos(0.14E1+a.*t).^2+0.11236E1.*sin(0.371E1+0.265E1.*a.*t).^2).^( ...
  -3).*((-0.2809E1).*cos(0.14E1+a.*t).^5.*cos(0.371E1+0.265E1.*a.*t) ...
  +(-0.106E1).*cos(0.14E1+a.*t).^4.*sin(0.14E1+a.*t).*sin(0.371E1+ ...
  0.265E1.*a.*t)+(-0.631238E1).*cos(0.14E1+a.*t).^3.*cos(0.371E1+ ...
  0.265E1.*a.*t).*sin(0.371E1+0.265E1.*a.*t).^2+(-0.238203E1).*cos( ...
  0.14E1+a.*t).^2.*sin(0.14E1+a.*t).*sin(0.371E1+0.265E1.*a.*t).^3+( ...
  -0.35463E1).*cos(0.14E1+a.*t).*cos(0.371E1+0.265E1.*a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^4+(-0.133823E1).*sin(0.14E1+a.*t).*sin( ...
  0.371E1+0.265E1.*a.*t).^5);
end
